!nvcc --version

!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git
%load_ext nvcc_plugin

%%cu
#include<iostream>
#include<iomanip>
#include<cstdlib>
#include<ctime>

using namespace std;

__global__ void vectorAdd(int *a, int *b, int *result, int n){
    int t_id = threadIdx.x+blockIdx.x*blockDim.x;
    if(t_id<n){
        result[t_id]=a[t_id]+b[t_id];
    }
}

int main(){
    int *a,*b,*c;
    int *a_dev, *b_dev, *c_dev;
    int n = 100;
    a = new int[n];
    b = new int[n];
    c = new int[n];

    int *d = new int[n];
    int size = n*sizeof(int);

    cudaMalloc(&a_dev, size);
    cudaMalloc(&b_dev, size);
    cudaMalloc(&c_dev, size);

    clock_t  normStart = clock();
    for(int i = 0; i<n; i++){
        a[i]=1;
        b[i]=2;
        d[i]=a[i]+b[i];  //serial addition
    }
    clock_t  normEnd = clock();

    cudaEvent_t start, end;

    cudaEventCreate(&start);
    cudaEventCreate(&end);

    cudaMemcpy(a_dev, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(b_dev, b, size, cudaMemcpyHostToDevice);

    int threads = 5;
    int blocks = 20;

    cudaEventRecord(start);
    vectorAdd<<<blocks, threads>>>(a_dev, b_dev, c_dev, n);
    cudaEventRecord(end);
 
    float time=0.0;
    cudaEventElapsedTime(&time,start,end);
    cudaMemcpy(c,c_dev,size,cudaMemcpyDeviceToHost);

    cudaEventSynchronize(end);
    for(int i=0; i<n; i++){
        printf("%d + %d = %d\n", a[i], b[i], c[i]);
        printf("%d\n", d[i]);
    }
cout<<"\nTime Elapsed: "<<time;
cout<<"\nTime Elapsed: "<<normEnd-normStart;

}
